#!/usr/bin/python

import sys
import argparse
from config_obj import *

default_args = [
    ('--auth-username', 'admin'),
    ('--auth-password', 'contrail123'),
    ('--auth-tenant', 'admin'),
    ('--auth-region', 'RegionOne'),
    ('--auth-server', '127.0.0.1'),
    ('--api-server', '127.0.0.1'),
    ('--tenant', 'demo')]


class ConfigCli():

    def __init__(self):
        self.parser_init()

    def env(self, *args, **kwargs):
        for arg in args:
            value = os.environ.get(arg, None)
            if value:
                return value
        return kwargs.get('default', '')

    def do_help(self, args):
        if args.obj_parser:
                args.obj_parser.print_help()
        else:
            self.parser.print_help()

    def add_common_args(self, sub_parser, default_name = None):
        sub_parser.add_argument('name', nargs = '?', default = default_name,
                metavar = '<name>', help = 'The name')
        sub_parser.add_argument('--format',
                choices = ['default', 'json', 'dict'],
                default = 'default', metavar = '<format>',
                help = 'The object format ' \
                       '[ default | json | dict ]')

    def parser_init(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--auth-username', help = 'User name')
        parser.add_argument('--auth-password', help = 'Password')
        parser.add_argument('--auth-tenant', help = 'Tenant name')
        parser.add_argument('--auth-region', help = 'Region name')
        parser.add_argument('--auth-server', help = 'Auth server address')
        parser.add_argument('--api-server', help = 'API server address')
        parser.add_argument('--tenant', help = 'Tenant name')

        op_parsers = parser.add_subparsers(metavar = '<operation>')

        op_list_parser = op_parsers.add_parser('list', help = 'list')
        op_show_parser = op_parsers.add_parser('show', help = 'show')
        op_create_parser = op_parsers.add_parser('create', help = 'create')
        op_add_parser = op_parsers.add_parser('add', help = 'add')
        op_delete_parser = op_parsers.add_parser('delete', help = 'delete')
        op_set_parser = op_parsers.add_parser('set', help = 'set')

        obj_list_parsers = op_list_parser.add_subparsers(
                metavar = '<object>')
        obj_show_parsers = op_show_parser.add_subparsers(
                metavar = '<object>')
        obj_create_parsers = op_create_parser.add_subparsers(
                metavar = '<object>')
        obj_add_parsers = op_add_parser.add_subparsers(
                metavar = '<object>')
        obj_delete_parsers = op_delete_parser.add_subparsers(
                metavar = '<object>')
        obj_set_parsers = op_set_parser.add_subparsers(
                metavar = '<object>')

        #### Tenant ####
        sub_parser = obj_list_parsers.add_parser('tenant', help = 'Tenant')
        sub_parser.set_defaults(obj_class = ConfigTenant,
                obj_parser = sub_parser)

        sub_parser = obj_show_parsers.add_parser('tenant', help = 'Tenant')
        sub_parser.set_defaults(obj_class = ConfigTenant,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)

        #### Virtual DNS ####
        sub_parser = subparsers.add_parser('vdns', help = 'Virtual DNS')
        sub_parser.set_defaults(obj_class = ConfigVirtualDns,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--domain-name', metavar = '<name>',
                help = 'The name of DNS domain')
        sub_parser.add_argument('--record-order',
                choices = ['fixed', 'random', 'round-robin'],
                default = 'random', metavar = '<order>',
                help = 'The order of DNS records ' \
                       '[ random | fixed | round-robin ]')
        sub_parser.add_argument('--next-dns', metavar = '<name>',
                help = 'The name of next virtual DNS service or ' \
                       'the IP address of DNS server reachable by fabric.')

        #### IPAM ####
        sub_parser = subparsers.add_parser('ipam', help = 'Network IPAM')
        sub_parser.set_defaults(obj_class = ConfigIpam,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--dns-type',
                choices = ['none', 'default', 'tenant', 'virtual'],
                metavar = '<type>',
                help = 'The type of DNS service ' \
                       '[ none | default | virtual | tenant ]')
        sub_parser.add_argument('--virtual-dns', metavar = '<name>',
                help = 'The name of virtual DNS service')
        sub_parser.add_argument('--tenant-dns', metavar = '<address>',
                action = 'append',
                help = 'The address of tenant DNS')
        sub_parser.add_argument('--domain-name', metavar = '<name>',
                help = 'The name of DNS domain')
        sub_parser.add_argument('--ntp-server', metavar = '<address>',
                help = 'The address of NTP server')

        sub_parser = subparsers.add_parser('policy', help = 'Network Policy')
        sub_parser.set_defaults(obj_class = ConfigPolicy,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--rule', action = 'append',
                metavar = '<arguments>',
                help = 'Policy rule ' \
                       'direction=[ "<>" | ">" ],' \
                       'protocol=[ any | tcp | udp | icmp ],' \
                       'src-net=[ <name> | any ],' \
                       'dst-net=[ <name> | any ],' \
                       'src-port=[ <start>:<end> | any ],' \
                       'dst-port=[ <start>:<end> | any ],' \
                       'action=[ pass | deny | drop | reject | alert | ' \
                               'log | service ],' \
                       'service=<name>,' \
                       'index=<index>')

        sub_parser = subparsers.add_parser('security-group',
                help = 'Security Group')
        sub_parser.set_defaults(obj_class = ConfigSecurityGroup,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--rule', metavar = '<index>',
                help = 'Rule index')
        sub_parser.add_argument('--direction',
                choices = ['ingress', 'egress'],
                metavar = '<direction>',
                help = 'Direction [ ingress | egress ]')
        sub_parser.add_argument('--protocol',
                choices = ['any', 'tcp', 'udp', 'icmp'],
                metavar = '<protocol>',
                help = 'Protocol [ any | tcp | udp | icmp ]')
        sub_parser.add_argument('--address', action = 'append',
                metavar = '<prefix>/<length>', help = 'Remote IP address')
        sub_parser.add_argument('--port', action = 'append', type = str,
                metavar = '<start>:<end>', help = 'The range of remote port')

        sub_parser = subparsers.add_parser('network',
                help = 'Virtual Network')
        sub_parser.set_defaults(obj_class = ConfigNetwork,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--ipam', metavar = '<name>',
                help = 'The name of IPAM')
        sub_parser.add_argument('--subnet', metavar = '<prefix>/<length>',
                help = 'Subnet prefix and length')
        sub_parser.add_argument('--gateway', metavar = '<address>',
                help = 'The gateway address of subnet')
        sub_parser.add_argument('--policy', metavar = '<name>',
                help = 'The name of network policy')
        sub_parser.add_argument('--route-target', metavar = '<AS>:<RT>',
                help = 'Route target')
        sub_parser.add_argument('--route-table', metavar = '<name>',
                help = 'The name of route table')
        sub_parser.add_argument('--l2', action = 'store_true',
                help = 'Layer 2 network, layer 2&3 by default')
        sub_parser.add_argument('--shared', action = 'store_true',
                help = 'Enable sharing with other tenants')
        sub_parser.add_argument('--external', action = 'store_true',
                help = 'Enable external access')

        sub_parser = subparsers.add_parser('floating-ip-pool',
                help = 'Floating IP Pool')
        sub_parser.set_defaults(obj_class = ConfigFloatingIpPool,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--network', metavar = '<name>',
                help = 'The name of virtual network holding floating IP pool')
        #sub_parser.add_argument('--floating-ip', action = 'store_true',
        #        help = 'Floating IP')

        sub_parser = subparsers.add_parser('vm',
                help = 'Virtual Machine')
        sub_parser.set_defaults(obj_class = ConfigVirtualMachine,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--image', metavar = '<name>',
                help = 'The name of image')
        sub_parser.add_argument('--flavor', metavar = '<name>',
                help = 'The name of flavor')
        sub_parser.add_argument('--network', action = 'append',
                metavar = '<name>',
                help = 'The name of network')
        sub_parser.add_argument('--user-data', metavar = '<name>',
                help = 'Full file name containing user data')
        sub_parser.add_argument('--node', metavar = '<name>',
                help = 'The name of compute node')
        sub_parser.add_argument('--wait', action = 'store_true',
                help = 'Wait till VM is active')

        sub_parser = subparsers.add_parser('interface-route-table',
                help = 'Interface Route Table')
        sub_parser.set_defaults(obj_class = ConfigInterfaceRouteTable,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--route', action = 'append',
                metavar = '<prefix>/<length>', help = 'Route')
        sub_parser.add_argument('--address-family',
                choices = ['ipv4', 'ipv6'],
                metavar = '<address family>',
                help = 'Address family [ ipv4 | ipv6 ]')

        sub_parser = subparsers.add_parser('route-table',
                help = 'Network Route Table')
        sub_parser.set_defaults(obj_class = ConfigRouteTable,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--route', action = 'append',
                metavar = '<arguments>',
                help = 'prefix=<prefix>/<length>,' \
                       'next-hop=<service instance>')

        sub_parser = subparsers.add_parser('vm-interface',
                help = 'Virtual Machine Interface')
        sub_parser.set_defaults(obj_class = ConfigVmInterface,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--interface-route-table', metavar = '<name>',
                help = 'The name of interface route table')
        sub_parser.add_argument('--security-group', metavar = '<name>',
                help = 'The name of security group')
        sub_parser.add_argument('--address', metavar = '<address>',
                help = 'IP address')
        sub_parser.add_argument('--floating-ip', metavar = '<address>',
                help = 'Floating IP address [ any | <address> ]')
        sub_parser.add_argument('--floating-ip-pool',
                metavar = '<pool>',
                help = 'The floating IP pool to allocate a floating IP from ' \
                       '<tenant>:<network>:<floating IP pool>')
        sub_parser.add_argument('--mirror', metavar = '<arguments>',
                help = 'Mirror ' \
                       'direction=[ "both" | "ingress" | "egress" ],' \
                       'address=<analyzer IP address>,' \
                       'name=<analyzer name>,' \
                       'port=<UDP port>')

        sub_parser = subparsers.add_parser('vmi',
                help = 'Virtual Machine Interface')
        sub_parser.set_defaults(obj_class = ConfigVmInterface,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--interface-route-table', metavar = '<name>',
                help = 'The name of interface route table')
        sub_parser.add_argument('--security-group', metavar = '<name>',
                help = 'The name of security group')
        sub_parser.add_argument('--address', metavar = '<address>',
                help = 'IP address')
        sub_parser.add_argument('--floating-ip', metavar = '<address>',
                help = 'Floating IP address [ any | <address> ]')
        sub_parser.add_argument('--floating-ip-pool',
                metavar = '<pool>',
                help = 'The floating IP pool to allocate a floating IP from ' \
                       '<tenant>:<network>:<floating IP pool>')
        sub_parser.add_argument('--mirror', metavar = '<arguments>',
                help = 'Mirror ' \
                       'direction=[ "both" | "ingress" | "egress" ],' \
                       'address=<analyzer IP address>,' \
                       'name=<analyzer name>,' \
                       'port=<UDP port>')

        sub_parser = subparsers.add_parser('port',
                help = 'Port')
        sub_parser.set_defaults(obj_class = ConfigPort,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--address', metavar = '<address>',
                help = 'IP address')
        sub_parser.add_argument('--network', metavar = '<name>',
                help = 'The name of virtual network')
        sub_parser.add_argument('--security-group', metavar = '<name>',
                help = 'The name of security group')
        sub_parser.add_argument('--shared', action = 'store_true',
                help = 'Enable IP address sharing')

        sub_parser = subparsers.add_parser('image',
                help = 'Virtual Machine Image')
        sub_parser.set_defaults(obj_class = ConfigImage)
        sub_parser.add_argument('name', nargs = '?', default = None)

        sub_parser = subparsers.add_parser('flavor',
                help = 'Virtual Machine Flavor')
        sub_parser.set_defaults(obj_class = ConfigFlavor)
        sub_parser.add_argument('name', nargs = '?', default = None)

        sub_parser = subparsers.add_parser('service-template',
                help = 'Service Template')
        sub_parser.set_defaults(obj_class = ConfigServiceTemplate,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--mode',
                choices = ['transparent', 'in-network', 'in-network-nat'],
                metavar = '<mode>',
                help = 'Service mode ' \
                       '[ transparent | in-network | in-network-nat ]')
        sub_parser.add_argument('--type',
                choices = ['firewall', 'analyzer'],
                metavar = '<type>',
                help = 'Service type [ firewall | analyzer ]')
        sub_parser.add_argument('--image', metavar = '<name>',
                help = 'The name of image')
        sub_parser.add_argument('--flavor', metavar = '<name>',
                help = 'The name of flavor')
        sub_parser.add_argument('--scale', action = 'store_true',
                help = 'Enable service scaling')
        sub_parser.add_argument('--interface',
                choices = ['management', 'left', 'right', 'other'],
                metavar = '<type>',
                action = 'append',
                help = 'Service interface ' \
                       '[ management | left | right | other ]')

        sub_parser = subparsers.add_parser('service-instance',
                help = 'Service Instance')
        sub_parser.set_defaults(obj_class = ConfigServiceInstance,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--template',
                metavar = '<template>',
                help = 'Service template')
        sub_parser.add_argument('--network', action = 'append',
                metavar = '<arguments>',
                help = 'network=[ <name> | auto ],tenant=<name>,' \
                       'route=<prefix>/<length> ' \
                       'The network order must be the same as interface ' \
                       'order defined in service template.')
        sub_parser.add_argument('--scale-max',
                metavar = '<number>',
                help = 'The maximum number of instances')
        sub_parser.add_argument('--auto-policy', action = 'store_true',
                help = 'Enable automatic policy')

        sub_parser = subparsers.add_parser('bgp-router',
                help = 'BGP Router')
        sub_parser.set_defaults(obj_class = ConfigBgpRouter,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--vendor', metavar = '<name>',
                help = 'The name of vendor')
        sub_parser.add_argument('--asn', metavar = '<number>',
                help = 'The number autonomous system')
        sub_parser.add_argument('--address', metavar = '<address>',
                help = 'The IP address of BGP router')
        sub_parser.add_argument('--identifier', metavar = '<identifier>',
                help = 'The identifier of BGP router')
        sub_parser.add_argument('--control', action = 'store_true',
                help = 'BGP router is control node')
        sub_parser.add_argument('--peer', action = 'append',
                metavar = '<peer name>', help = 'BGP peer')

        #### vrouter ####
        sub_parser = subparsers.add_parser('vrouter',
                help = 'vRouter')
        sub_parser.set_defaults(obj_class = ConfigVrouter,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser)
        sub_parser.add_argument('--address', metavar = '<address>',
                help = 'The IP address of virtual router')

        sub_parser = subparsers.add_parser('global-vrouter',
                help = 'Global vRouter')
        sub_parser.set_defaults(obj_class = ConfigGlobalVrouter,
                obj_parser = sub_parser)
        self.add_common_args(sub_parser,
                default_name = 'default-global-vrouter-config')
        sub_parser.add_argument('--linklocal', action = 'append',
                metavar = '<arguments>',
                help = 'name=<name>,linklocal-address=<address>:<port>,' \
                       'fabric-address=<address>:<port>')
        self.parser = parser

    def run(self):
        args = self.parser.parse_args()
        print args
        return
        client = ConfigClient(args.auth_username, args.auth_password,
                args.auth_tenant, args.api_server, args.auth_region,
                args.auth_server, args.tenant)
        obj = args.obj_class(client = client)
        #func = getattr(obj, args.op)
        #func(args)



if __name__ == '__main__':
    for arg in default_args:
        if not arg[0] in sys.argv:
            sys.argv.insert(1, arg[0])
            sys.argv.insert(2, arg[1])
    ConfigCli().run()

